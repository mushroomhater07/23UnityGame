//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Script/movement/map/InputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMap"",
    ""maps"": [
        {
            ""name"": ""onFoot"",
            ""id"": ""44c55737-e270-4131-9644-fa2be9174b3f"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""396ccc5d-0f54-4901-8177-d3277b911472"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookAround"",
                    ""type"": ""Value"",
                    ""id"": ""e7be1853-3e78-4a1d-a348-c99a58195f2a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""49c9f5a4-e002-4b61-8ed3-edc3b4de2352"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fast"",
                    ""type"": ""Button"",
                    ""id"": ""97e8d815-f1df-40fd-a3fe-4b0f6eac2290"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""2c158d25-67cf-4876-9e50-3f575d0c1a72"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""44824f76-85ec-4ca6-b966-acf027c08be9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8eeada62-27f0-40ae-b48b-de42281ada39"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ad4b3e60-020d-42c0-9ca5-34dca9ab0fc7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""94ee04db-d84f-44ed-bf4a-7dd54ee9e304"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""80210cb5-0753-48eb-9d73-e53b0b279b5c"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c636a7d8-b485-4cad-94cc-799c808ffca1"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=10,y=10)"",
                    ""groups"": """",
                    ""action"": ""LookAround"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2526550-d3d4-49ef-810d-8637ce683e4e"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookAround"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f54f4090-c6bf-4c80-afc8-fb7c6980f571"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f68c94f-e163-4522-8e9f-4eb05ec93cfa"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f11bd974-8fae-44ae-9550-971ee11b8273"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5bcdc3d5-9ad8-41a9-9e01-7a20fc2d2b74"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb55db6f-3d0e-48f0-8e10-c126f88a1947"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""onCar"",
            ""id"": ""b8bf51b3-1c3d-4916-b1c5-94b2ba8e3e46"",
            ""actions"": [
                {
                    ""name"": ""offCar"",
                    ""type"": ""Button"",
                    ""id"": ""8109a584-97af-4448-858b-f6e46055badb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drive"",
                    ""type"": ""Value"",
                    ""id"": ""69f2e15a-7512-4a9b-9e50-41174a2b31ce"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""24ae9017-e2d0-41e1-bcdf-ab90b3fa4273"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""eb80a8f3-a902-4456-acd0-e0d8df72b360"",
                    ""path"": ""<DualShockGamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""offCar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56e9f7de-19a4-46e0-a1b3-74357a9a7228"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""offCar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""keyboard"",
                    ""id"": ""6f5dc0b3-e195-4cc2-9564-8f197077aec7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e7069ae7-cab0-4c94-9144-32794c7cbe35"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8503bb86-7a72-409e-a34f-58867581163c"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""60d2acab-ebb2-4fb5-ae54-f3e55f086d25"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4f5e8f62-ecfa-42b9-af91-4b66f3383285"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""7bbfbb7e-802b-4897-a2cc-f4e542864e67"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""52c5c45c-c167-4fda-a283-ddacc25e35af"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9fb5e5a9-3c94-4eca-90a2-643d245fe18d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""95d75886-cdb1-4f51-9801-58f46f5ce911"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1429b571-98b8-49d6-80b7-2a0697b41cb2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b821555c-0ca8-4b50-8dd5-227cffac74ee"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""nearCar"",
            ""id"": ""c7a83149-6838-4b6f-bf79-094dbaed6713"",
            ""actions"": [
                {
                    ""name"": ""onCar"",
                    ""type"": ""Button"",
                    ""id"": ""06bc1384-dbdd-4228-8d4b-b13ebdc2deb2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""88ac2f0c-f04d-4935-b8ce-b2ad2509f39e"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""onCar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85fce224-cf08-4000-93bf-7f5992a37d86"",
                    ""path"": ""<DualShockGamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""onCar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""always"",
            ""id"": ""0c384011-fa24-4eca-8da0-65847f9cc742"",
            ""actions"": [
                {
                    ""name"": ""Hook"",
                    ""type"": ""Button"",
                    ""id"": ""6f3be04e-97ac-4b13-98de-3b942abfe949"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""be64009f-e01a-41d0-b609-166977616f58"",
                    ""path"": ""<Keyboard>/backquote"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f19d736-6c3e-4567-b549-5f17d4d19597"",
                    ""path"": ""<DualShockGamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""shooting"",
            ""id"": ""b5ef8090-0678-4ca5-89cd-53409f964bff"",
            ""actions"": [
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""b0e0084f-f19f-445a-a57c-fbfc5ff7e03a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""ce36f1c6-b792-4eda-b365-eb72483b45c8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Button"",
                    ""id"": ""771b2c10-30a7-4310-b4ee-76503adc173c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""05baee96-5b04-4a5f-9d8d-1e68ba496fdb"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b077cc0b-dc58-4052-8f3c-79474e5d9181"",
                    ""path"": ""<DualShockGamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""793e3563-7501-4c41-8f87-3046ce140e34"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2489d6f5-94bc-43f6-9037-7529fd09168e"",
                    ""path"": ""<VirtualMouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e22ac36b-6cfd-4a54-ae68-c7349f4a9e69"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41f4067a-031f-4fc4-a898-195e90192c58"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a2ba287e-9de3-4103-bc5d-832bbf612ec3"",
                    ""path"": ""<VirtualMouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09294d4b-eeb2-4b13-b062-6f7f824d788c"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // onFoot
        m_onFoot = asset.FindActionMap("onFoot", throwIfNotFound: true);
        m_onFoot_Walk = m_onFoot.FindAction("Walk", throwIfNotFound: true);
        m_onFoot_LookAround = m_onFoot.FindAction("LookAround", throwIfNotFound: true);
        m_onFoot_Jump = m_onFoot.FindAction("Jump", throwIfNotFound: true);
        m_onFoot_Fast = m_onFoot.FindAction("Fast", throwIfNotFound: true);
        // onCar
        m_onCar = asset.FindActionMap("onCar", throwIfNotFound: true);
        m_onCar_offCar = m_onCar.FindAction("offCar", throwIfNotFound: true);
        m_onCar_Drive = m_onCar.FindAction("Drive", throwIfNotFound: true);
        m_onCar_Look = m_onCar.FindAction("Look", throwIfNotFound: true);
        // nearCar
        m_nearCar = asset.FindActionMap("nearCar", throwIfNotFound: true);
        m_nearCar_onCar = m_nearCar.FindAction("onCar", throwIfNotFound: true);
        // always
        m_always = asset.FindActionMap("always", throwIfNotFound: true);
        m_always_Hook = m_always.FindAction("Hook", throwIfNotFound: true);
        // shooting
        m_shooting = asset.FindActionMap("shooting", throwIfNotFound: true);
        m_shooting_Reload = m_shooting.FindAction("Reload", throwIfNotFound: true);
        m_shooting_Shoot = m_shooting.FindAction("Shoot", throwIfNotFound: true);
        m_shooting_Aim = m_shooting.FindAction("Aim", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // onFoot
    private readonly InputActionMap m_onFoot;
    private List<IOnFootActions> m_OnFootActionsCallbackInterfaces = new List<IOnFootActions>();
    private readonly InputAction m_onFoot_Walk;
    private readonly InputAction m_onFoot_LookAround;
    private readonly InputAction m_onFoot_Jump;
    private readonly InputAction m_onFoot_Fast;
    public struct OnFootActions
    {
        private @InputMap m_Wrapper;
        public OnFootActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_onFoot_Walk;
        public InputAction @LookAround => m_Wrapper.m_onFoot_LookAround;
        public InputAction @Jump => m_Wrapper.m_onFoot_Jump;
        public InputAction @Fast => m_Wrapper.m_onFoot_Fast;
        public InputActionMap Get() { return m_Wrapper.m_onFoot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnFootActions set) { return set.Get(); }
        public void AddCallbacks(IOnFootActions instance)
        {
            if (instance == null || m_Wrapper.m_OnFootActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OnFootActionsCallbackInterfaces.Add(instance);
            @Walk.started += instance.OnWalk;
            @Walk.performed += instance.OnWalk;
            @Walk.canceled += instance.OnWalk;
            @LookAround.started += instance.OnLookAround;
            @LookAround.performed += instance.OnLookAround;
            @LookAround.canceled += instance.OnLookAround;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Fast.started += instance.OnFast;
            @Fast.performed += instance.OnFast;
            @Fast.canceled += instance.OnFast;
        }

        private void UnregisterCallbacks(IOnFootActions instance)
        {
            @Walk.started -= instance.OnWalk;
            @Walk.performed -= instance.OnWalk;
            @Walk.canceled -= instance.OnWalk;
            @LookAround.started -= instance.OnLookAround;
            @LookAround.performed -= instance.OnLookAround;
            @LookAround.canceled -= instance.OnLookAround;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Fast.started -= instance.OnFast;
            @Fast.performed -= instance.OnFast;
            @Fast.canceled -= instance.OnFast;
        }

        public void RemoveCallbacks(IOnFootActions instance)
        {
            if (m_Wrapper.m_OnFootActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOnFootActions instance)
        {
            foreach (var item in m_Wrapper.m_OnFootActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OnFootActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OnFootActions @onFoot => new OnFootActions(this);

    // onCar
    private readonly InputActionMap m_onCar;
    private List<IOnCarActions> m_OnCarActionsCallbackInterfaces = new List<IOnCarActions>();
    private readonly InputAction m_onCar_offCar;
    private readonly InputAction m_onCar_Drive;
    private readonly InputAction m_onCar_Look;
    public struct OnCarActions
    {
        private @InputMap m_Wrapper;
        public OnCarActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @offCar => m_Wrapper.m_onCar_offCar;
        public InputAction @Drive => m_Wrapper.m_onCar_Drive;
        public InputAction @Look => m_Wrapper.m_onCar_Look;
        public InputActionMap Get() { return m_Wrapper.m_onCar; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnCarActions set) { return set.Get(); }
        public void AddCallbacks(IOnCarActions instance)
        {
            if (instance == null || m_Wrapper.m_OnCarActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OnCarActionsCallbackInterfaces.Add(instance);
            @offCar.started += instance.OnOffCar;
            @offCar.performed += instance.OnOffCar;
            @offCar.canceled += instance.OnOffCar;
            @Drive.started += instance.OnDrive;
            @Drive.performed += instance.OnDrive;
            @Drive.canceled += instance.OnDrive;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
        }

        private void UnregisterCallbacks(IOnCarActions instance)
        {
            @offCar.started -= instance.OnOffCar;
            @offCar.performed -= instance.OnOffCar;
            @offCar.canceled -= instance.OnOffCar;
            @Drive.started -= instance.OnDrive;
            @Drive.performed -= instance.OnDrive;
            @Drive.canceled -= instance.OnDrive;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
        }

        public void RemoveCallbacks(IOnCarActions instance)
        {
            if (m_Wrapper.m_OnCarActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOnCarActions instance)
        {
            foreach (var item in m_Wrapper.m_OnCarActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OnCarActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OnCarActions @onCar => new OnCarActions(this);

    // nearCar
    private readonly InputActionMap m_nearCar;
    private List<INearCarActions> m_NearCarActionsCallbackInterfaces = new List<INearCarActions>();
    private readonly InputAction m_nearCar_onCar;
    public struct NearCarActions
    {
        private @InputMap m_Wrapper;
        public NearCarActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @onCar => m_Wrapper.m_nearCar_onCar;
        public InputActionMap Get() { return m_Wrapper.m_nearCar; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NearCarActions set) { return set.Get(); }
        public void AddCallbacks(INearCarActions instance)
        {
            if (instance == null || m_Wrapper.m_NearCarActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NearCarActionsCallbackInterfaces.Add(instance);
            @onCar.started += instance.OnOnCar;
            @onCar.performed += instance.OnOnCar;
            @onCar.canceled += instance.OnOnCar;
        }

        private void UnregisterCallbacks(INearCarActions instance)
        {
            @onCar.started -= instance.OnOnCar;
            @onCar.performed -= instance.OnOnCar;
            @onCar.canceled -= instance.OnOnCar;
        }

        public void RemoveCallbacks(INearCarActions instance)
        {
            if (m_Wrapper.m_NearCarActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INearCarActions instance)
        {
            foreach (var item in m_Wrapper.m_NearCarActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NearCarActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NearCarActions @nearCar => new NearCarActions(this);

    // always
    private readonly InputActionMap m_always;
    private List<IAlwaysActions> m_AlwaysActionsCallbackInterfaces = new List<IAlwaysActions>();
    private readonly InputAction m_always_Hook;
    public struct AlwaysActions
    {
        private @InputMap m_Wrapper;
        public AlwaysActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Hook => m_Wrapper.m_always_Hook;
        public InputActionMap Get() { return m_Wrapper.m_always; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AlwaysActions set) { return set.Get(); }
        public void AddCallbacks(IAlwaysActions instance)
        {
            if (instance == null || m_Wrapper.m_AlwaysActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AlwaysActionsCallbackInterfaces.Add(instance);
            @Hook.started += instance.OnHook;
            @Hook.performed += instance.OnHook;
            @Hook.canceled += instance.OnHook;
        }

        private void UnregisterCallbacks(IAlwaysActions instance)
        {
            @Hook.started -= instance.OnHook;
            @Hook.performed -= instance.OnHook;
            @Hook.canceled -= instance.OnHook;
        }

        public void RemoveCallbacks(IAlwaysActions instance)
        {
            if (m_Wrapper.m_AlwaysActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAlwaysActions instance)
        {
            foreach (var item in m_Wrapper.m_AlwaysActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AlwaysActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AlwaysActions @always => new AlwaysActions(this);

    // shooting
    private readonly InputActionMap m_shooting;
    private List<IShootingActions> m_ShootingActionsCallbackInterfaces = new List<IShootingActions>();
    private readonly InputAction m_shooting_Reload;
    private readonly InputAction m_shooting_Shoot;
    private readonly InputAction m_shooting_Aim;
    public struct ShootingActions
    {
        private @InputMap m_Wrapper;
        public ShootingActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Reload => m_Wrapper.m_shooting_Reload;
        public InputAction @Shoot => m_Wrapper.m_shooting_Shoot;
        public InputAction @Aim => m_Wrapper.m_shooting_Aim;
        public InputActionMap Get() { return m_Wrapper.m_shooting; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShootingActions set) { return set.Get(); }
        public void AddCallbacks(IShootingActions instance)
        {
            if (instance == null || m_Wrapper.m_ShootingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShootingActionsCallbackInterfaces.Add(instance);
            @Reload.started += instance.OnReload;
            @Reload.performed += instance.OnReload;
            @Reload.canceled += instance.OnReload;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
        }

        private void UnregisterCallbacks(IShootingActions instance)
        {
            @Reload.started -= instance.OnReload;
            @Reload.performed -= instance.OnReload;
            @Reload.canceled -= instance.OnReload;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
        }

        public void RemoveCallbacks(IShootingActions instance)
        {
            if (m_Wrapper.m_ShootingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IShootingActions instance)
        {
            foreach (var item in m_Wrapper.m_ShootingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShootingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ShootingActions @shooting => new ShootingActions(this);
    public interface IOnFootActions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnLookAround(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnFast(InputAction.CallbackContext context);
    }
    public interface IOnCarActions
    {
        void OnOffCar(InputAction.CallbackContext context);
        void OnDrive(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
    public interface INearCarActions
    {
        void OnOnCar(InputAction.CallbackContext context);
    }
    public interface IAlwaysActions
    {
        void OnHook(InputAction.CallbackContext context);
    }
    public interface IShootingActions
    {
        void OnReload(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
    }
}
